<?php
/**
 * Subs generated by https://github.com/juzna/php-stubs-generator
 */
namespace Git2;

class Repository {
	public function __construct($repository_path) {}
	public function isEmpty() {}
	public function isBare() {}
	public function getPath() {}
	public function getWorkdir() {}
	public function headDetached() {}
	public function headOrphan() {}
	public static function init($isBare) {}
	public static function discover($path, $across_fs, $ceiling_dirs) {}
	public function exists($exists) {}
	public function hash($contents, $type) {}
	public function write($contents, $type) {}
	public function lookup($lookup, $type) {}
}

class Commit {
	public function getMessage() {}
	public function getMessageEncoding() {}
	public function parentCount() {}
	public function getAuthor() {}
	public function getCommitter() {}
	public function getOid() {}
	public function getTree() {}
	public function getParentCount() {}
	public function getParent($index) {}
	public function getParents() {}
	public static function create($repository, $data) {}
}

class Blob {
	public function getContent() {}
	public function getSize() {}
	public function __toString() {}
	public static function create($repository, $contents) {}
}

class Tree {
	public function current() {}
	public function key() {}
	public function next() {}
	public function rewind() {}
	public function valid() {}
	public function getSubtree($path) {}
	public function getEntryByName($path) {}
}

class TreeBuilder {
	public function __construct($tree) {}
	public function insert($entry) {}
	public function remove($name) {}
	public function clear() {}
	public function write() {}
}

class TreeEntry {
	public function __construct($entry) {}
	public function isTree() {}
	public function isBlob() {}
	public function isSubmodule() {}
}

class Signature {
	public function __construct($name, $email, $date) {}
}

class Walker {
	public function __construct($repository) {}
	public function sorting($mode) {}
	public function push($sha) {}
	public function hide($sha) {}
	public function reset() {}
	public function current() {}
	public function key() {}
	public function next() {}
	public function rewind() {}
	public function valid() {}
}

class Reference {
	public function getTarget() {}
	public function getName() {}
	public function getBaseName() {}
	public function resolve() {}
	public static function each($repository, $filter) {}
	public static function lookup($repository, $path) {}
}

class IndexEntry {
}

class Index {
	public function __construct($entry) {}
	public function count() {}
	public function current() {}
	public function key() {}
	public function next() {}
	public function rewind() {}
	public function valid() {}
	public function writeTree() {}
}

class Config {
	public function __construct($entry) {}
	public function get($get) {}
	public function store($key, $value) {}
	public function delete($key) {}
}

class Remote {
	public function __construct($repository, $url) {}
	public function fetch() {}
}

class Tag {
	public function getTarget() {}
	public function getMessage() {}
	public function getBaseName() {}
}

class ODB {
	public function hash($contents, $type) {}
	public function write($contents, $type) {}
	public function exists($oid) {}
	public function read($oid) {}
}

class ODBObject {
	public function getContent() {}
	public function getType() {}
}

abstract class Backend {
	public function __construct() {}
	abstract public function read($oid, $type);
	abstract public function readPrefix($oid, $type);
	abstract public function readHeader($oid, $type);
	abstract public function write($oid, $data, $size, $type);
	abstract public function exists($oid);
	abstract public function free();
}
